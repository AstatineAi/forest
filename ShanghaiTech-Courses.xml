<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>341</fr:anchor><fr:addr
type="user">ShanghaiTech-Courses</fr:addr><fr:route>ShanghaiTech-Courses.xml</fr:route><fr:title
text="Courses">Courses</fr:title><fr:authors><fr:author><fr:link
type="local"
href="astinita.xml"
addr="astinita"
title="Hengyu Ai">Hengyu Ai</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:ul><fr:li><fr:link
type="local"
href="ShanghaiTech-CS101-index.xml"
addr="ShanghaiTech-CS101-index"
title="Courses › Algorithm &amp; DS Fall 2024">Algorithm &amp; Data Structures Fall 2024</fr:link></fr:li>

<fr:li><fr:link
type="local"
href="ShanghaiTech-SI140A-index.xml"
addr="ShanghaiTech-SI140A-index"
title="Courses › Probability &amp; Statistics for EECS Fall 2024">Probability &amp; Statistics for EECS Fall 2024</fr:link></fr:li></fr:ul></fr:mainmatter><fr:backmatter><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Context">Context</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>343</fr:anchor><fr:addr
type="user">index</fr:addr><fr:route>index.xml</fr:route><fr:title
text="Thought Cabinet">Thought Cabinet</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>This is a simple collection of
  <fr:ul><fr:li>Interesting things I heard about (collect them to deal with "citation needed")</fr:li>
    <fr:li>Some notes on course content/course project/books.</fr:li>
    <fr:li>Other random thoughts from my brain.</fr:li></fr:ul></fr:p><fr:p>This website is a <fr:link
type="external"
href="https://www.jonmsterling.com/foreign-forester-tfmt-000V.xml">“forest”</fr:link> created using the <fr:link
type="external"
href="https://www.jonmsterling.com/foreign-forester-index.xml">Forester</fr:link> tool. To navigate this forest, press <fr:code>Ctrl + K</fr:code>.</fr:p><fr:p>The phrase <fr:em>Thought Cabinet</fr:em> is from the game <fr:link
type="external"
href="https://store.steampowered.com/app/632470/Disco_Elysium__The_Final_Cut/">Disco Elysium</fr:link>.</fr:p><fr:p>这个网站是一个由 <fr:link
type="external"
href="https://www.jonmsterling.com/foreign-forester-index.xml">Forester</fr:link> 工具构建的 <fr:link
type="external"
href="https://www.jonmsterling.com/foreign-forester-tfmt-000V.xml">“森林”</fr:link>。按 <fr:code>Ctrl + K</fr:code> 浏览全部内容的目录 &amp; 进行搜索。</fr:p><fr:p>网站的名字 <fr:em>Thought Cabinet</fr:em> 来自游戏 <fr:link
type="external"
href="https://store.steampowered.com/app/632470/Disco_Elysium__The_Final_Cut/">Disco Elysium</fr:link> 中的角色成长系统（之一）<fr:em>思维阁</fr:em>。</fr:p>
  <fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>344</fr:anchor><fr:addr
type="user">astinita</fr:addr><fr:route>astinita.xml</fr:route><fr:title
text="Hengyu Ai">Hengyu Ai</fr:title><fr:taxon>Person</fr:taxon><fr:authors /><fr:meta
name="institution"><fr:link
type="external"
href="https://www.shanghaitech.edu.cn/eng/">ShanghaiTech University</fr:link></fr:meta></fr:frontmatter><fr:mainmatter><fr:p>Undergraduate @ ShanghaiTech University</fr:p><fr:p>如果这行中文 &amp; 下方的公式显示正常 &amp; 代码有高亮，说明网页加载正常。</fr:p><fr:tex
display="block"><![CDATA[   Y = \lambda  f. (\lambda  x. f (x x)) (\lambda  x. f (x x)) ]]></fr:tex>
  <fr:pre><html:code
xmlns:html="http://www.w3.org/1999/xhtml"
class="&quot;language-haskell&quot;">primes = filterPrime [2..] where
  filterPrime (p:xs) =
    p : filterPrime [x | x &lt;- xs, x `mod` p /= 0]
</html:code></fr:pre>
</fr:mainmatter><fr:backmatter /></fr:tree>

  <html:hr
xmlns:html="http://www.w3.org/1999/xhtml" />
<fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>345</fr:anchor><fr:addr
type="machine">#244</fr:addr><fr:route>unstable-244.xml</fr:route><fr:title
text="Random Ideas">Random Ideas</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>346</fr:anchor><fr:addr
type="user">random-idea-0003</fr:addr><fr:route>random-idea-0003.xml</fr:route><fr:title
text="有什么可担心的？">有什么可担心的？</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>9</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>你就想：</fr:p><fr:p>对面的那个人也是活人，</fr:p><fr:p>也会手冲。</fr:p><fr:p>差不多就行了，但是不要太详细的想他手冲。</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>347</fr:anchor><fr:addr
type="user">random-idea-0002</fr:addr><fr:route>random-idea-0002.xml</fr:route><fr:title
text="A &quot;Not Very Deep&quot; Insight">A "Not Very Deep" Insight</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="astinita.xml"
addr="astinita"
title="Hengyu Ai">Hengyu Ai</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>在线性代数里面我们已经理解了为什么 Gauss 消元/ Gauss-Jordan 消元就是：
  <fr:ul><fr:li>LU 分解</fr:li>
    <fr:li>解线性方程组</fr:li>
    <fr:li>求逆矩阵</fr:li>
    <fr:li>求行列式</fr:li></fr:ul></fr:p><fr:p>在算法课上我们了解了 Floyd-Warshall 算法就是传递闭包（的一个实现），而邻接矩阵的 <fr:tex
display="inline"><![CDATA[k]]></fr:tex> 次幂代表了节点之间长度恰好为 <fr:tex
display="inline"><![CDATA[k]]></fr:tex> 的路径的数量。</fr:p><fr:p>如果定义一些新的 "product"，Folyd-Warshall 也是一种矩阵乘法。</fr:p><fr:p>如果考虑其他“输入”和结果的集合，是否可以使用同一种描述来表示：
  <fr:ul><fr:li>LU 分解</fr:li>
    <fr:li>解线性方程组</fr:li>
    <fr:li>求逆矩阵</fr:li>
    <fr:li>求行列式</fr:li>
    <fr:li>Floyd-Warshall 算法</fr:li>
    <fr:li>传递闭包</fr:li>
    <fr:li>DFA &amp; NFA</fr:li>
    <fr:li>Markov 链</fr:li>
    <fr:li>齐次线性递推</fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>349</fr:anchor><fr:addr
type="user">random-idea-0001</fr:addr><fr:route>random-idea-0001.xml</fr:route><fr:title
text="Essence, Reductionism and Abstraction Leak">Essence, Reductionism and Abstraction Leak</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="astinita.xml"
addr="astinita"
title="Hengyu Ai">Hengyu Ai</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Consider this question: To what extent can we say that the essence of one thing <fr:tex
display="inline"><![CDATA[x]]></fr:tex> is almost another thing <fr:tex
display="inline"><![CDATA[y]]></fr:tex>?</fr:p><fr:p>In algebra, we have:</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>251</fr:anchor><fr:addr
type="user">concept-0001</fr:addr><fr:route>concept-0001.xml</fr:route><fr:title
text="Equivalence Relation">Equivalence Relation</fr:title><fr:taxon>Definitions</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>An <fr:strong>equivalence relation（等价关系）</fr:strong> is a binary relation <fr:tex
display="inline"><![CDATA[\equiv ]]></fr:tex> on a set <fr:tex
display="inline"><![CDATA[S]]></fr:tex>, such that:

  <fr:ul><fr:li>reflexive: for all <fr:tex
display="inline"><![CDATA[x : S]]></fr:tex>, <fr:tex
display="inline"><![CDATA[x \equiv  x]]></fr:tex></fr:li>
    <fr:li>symmetric: for all <fr:tex
display="inline"><![CDATA[x, y : S]]></fr:tex>, if <fr:tex
display="inline"><![CDATA[x \equiv  y]]></fr:tex> then <fr:tex
display="inline"><![CDATA[y \equiv  x]]></fr:tex></fr:li>
    <fr:li>transitive: for all <fr:tex
display="inline"><![CDATA[x, y, z : S]]></fr:tex>, if <fr:tex
display="inline"><![CDATA[x \equiv  y]]></fr:tex> and <fr:tex
display="inline"><![CDATA[y \equiv  z]]></fr:tex> then <fr:tex
display="inline"><![CDATA[x \equiv  z]]></fr:tex></fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:p>Maybe we can say that <fr:tex
display="inline"><![CDATA[x]]></fr:tex> and <fr:tex
display="inline"><![CDATA[y]]></fr:tex> share the same essence if and only if there exists an equivalence relation <fr:tex
display="inline"><![CDATA[\operatorname {R}]]></fr:tex>, such that <fr:tex
display="inline"><![CDATA[x \operatorname {R} y]]></fr:tex>.</fr:p><fr:p>Under this definition, we can find some interesting examples. For instance, Dijkstra's algorithm and Prim's algorithm both find a <fr:em>minimum</fr:em> among the un-visited stuff, and Dijkstra's algorithm is an A* graph search with heuristic function <fr:tex
display="inline"><![CDATA[h(v) = 0]]></fr:tex>.</fr:p><fr:p>However, it's not always to break concepts down to <fr:em>essence</fr:em>, especially we can't definitely say that everything has an essence.</fr:p><fr:p>From the perspective of computability, Dijkstra's algorithm is a turing machine that always halts, or some extremely complex lambda calculus terms that always reduces to a normal form. From the perspective of implementation and hardware, it's a collection of instructions that can be executed.</fr:p><fr:p>这种“回归本质”，或者说，还原主义的思维方式在理工科同学中并不少见，但是人心不足蛇吞象，尝试用本质描述一切就像是把大一统理论放在目标列表的第一项，总想着一口吃下整个思维过程。</fr:p><fr:p>It's unreasonable to conclude everything by assigning an essence to it. The context matters.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>252</fr:anchor><fr:addr
type="user">concept-0004</fr:addr><fr:route>concept-0004.xml</fr:route><fr:title
text="Abstraction Leak">Abstraction Leak</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>9</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p><fr:strong>Abstraction</fr:strong> is crucial for understanding complex systems. It is another layer above the concrete details. Ideally, we can order knowledge in a top-down approach, starting from the most abstract concepts and then diving into the details.</fr:p><fr:p>The not-so-ideal reality is that <fr:strong>asbtractions do not always have "proper generality"</fr:strong>. This means that in some cases we must deal with the details which the abstraction was supposed to hide. This is what we call an <fr:strong>abstraction leak</fr:strong>.</fr:p><fr:p>Abstraction leaks are not necessarily related to the implementation or hardware details. If an abstraction exagerates the generality of a concept, other things based on it may not work as expected.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree>
  
  <fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>351</fr:anchor><fr:addr
type="user">ShanghaiTech-Courses</fr:addr><fr:route>ShanghaiTech-Courses.xml</fr:route><fr:title
text="Courses">Courses</fr:title><fr:authors><fr:author><fr:link
type="local"
href="astinita.xml"
addr="astinita"
title="Hengyu Ai">Hengyu Ai</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:ul><fr:li><fr:link
type="local"
href="ShanghaiTech-CS101-index.xml"
addr="ShanghaiTech-CS101-index"
title="Courses › Algorithm &amp; DS Fall 2024">Algorithm &amp; Data Structures Fall 2024</fr:link></fr:li>

<fr:li><fr:link
type="local"
href="ShanghaiTech-SI140A-index.xml"
addr="ShanghaiTech-SI140A-index"
title="Courses › Probability &amp; Statistics for EECS Fall 2024">Probability &amp; Statistics for EECS Fall 2024</fr:link></fr:li></fr:ul></fr:mainmatter><fr:backmatter /></fr:tree>
</fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Related">Related</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>353</fr:anchor><fr:addr
type="user">ShanghaiTech-SI140A-index</fr:addr><fr:route>ShanghaiTech-SI140A-index.xml</fr:route><fr:title
text="Courses › Probability &amp; Statistics for EECS Fall 2024"><fr:link
type="local"
href="ShanghaiTech-Courses.xml"
addr="ShanghaiTech-Courses"
title="Courses">Courses</fr:link> › Probability &amp; Statistics for EECS Fall 2024</fr:title><fr:taxon>Course</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /><fr:meta
name="external">https://i-techx.github.io/iTechX/courses?course_code=SI140A</fr:meta></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>290</fr:anchor><fr:addr
type="user">ShanghaiTech-SI140A-Concepts</fr:addr><fr:route>ShanghaiTech-SI140A-Concepts.xml</fr:route><fr:title
text="Concepts and definitions">Concepts and definitions</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter /><fr:backmatter /></fr:tree>
  <html:hr
xmlns:html="http://www.w3.org/1999/xhtml" />
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>291</fr:anchor><fr:addr
type="user">ShanghaiTech-SI140A-Lectures</fr:addr><fr:route>ShanghaiTech-SI140A-Lectures.xml</fr:route><fr:title
text="Lectures">Lectures</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter /><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>354</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-index</fr:addr><fr:route>ShanghaiTech-CS101-index.xml</fr:route><fr:title
text="Courses › Algorithm &amp; DS Fall 2024"><fr:link
type="local"
href="ShanghaiTech-Courses.xml"
addr="ShanghaiTech-Courses"
title="Courses">Courses</fr:link> › Algorithm &amp; DS Fall 2024</fr:title><fr:taxon>Course</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>7</fr:day></fr:date><fr:authors /><fr:meta
name="external">https://i-techx.github.io/iTechX/courses?course_code=CS101</fr:meta></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>278</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-Concepts</fr:addr><fr:route>ShanghaiTech-CS101-Concepts.xml</fr:route><fr:title
text="Concepts and definitions">Concepts and definitions</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>275</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0002</fr:addr><fr:route>ShanghaiTech-CS101-0002.xml</fr:route><fr:title
text="Disjoint Set">Disjoint Set</fr:title><fr:taxon>Definitions</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>Disjoint set（并查集） is a data structure that keeps track of equivalence classes of all elements in a set.

  It supports two operations:

  <fr:ul><fr:li><fr:code>find(x)</fr:code>: return the representative of the set that element <fr:tex
display="inline"><![CDATA[x]]></fr:tex> belongs to.</fr:li>
    <fr:li><fr:code>union(x, y)</fr:code>: merge the sets that contain <fr:tex
display="inline"><![CDATA[x]]></fr:tex> and <fr:tex
display="inline"><![CDATA[y]]></fr:tex>.</fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>276</fr:anchor><fr:addr
type="user">concept-0002</fr:addr><fr:route>concept-0002.xml</fr:route><fr:title
text="Graph">Graph</fr:title><fr:taxon>Definitions</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>A <fr:strong>graph</fr:strong> is a collection of vertices and edges. An edge connects two vertices. We can represent a graph as <fr:tex
display="inline"><![CDATA[G = (V, E)]]></fr:tex>, where <fr:tex
display="inline"><![CDATA[V]]></fr:tex> is the set of vertices and <fr:tex
display="inline"><![CDATA[E]]></fr:tex> is the set of edges.</fr:p><fr:p>A graph can be directed or undirected, edge <fr:tex
display="inline"><![CDATA[(u, v)]]></fr:tex> in a directed graph has a direction from <fr:tex
display="inline"><![CDATA[u]]></fr:tex> to <fr:tex
display="inline"><![CDATA[v]]></fr:tex>, while in an undirected graph, the edge has no direction (can be denoted as <fr:tex
display="inline"><![CDATA[\{u, v\}]]></fr:tex>).</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree>
  <html:hr
xmlns:html="http://www.w3.org/1999/xhtml" />
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>279</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-Lectures</fr:addr><fr:route>ShanghaiTech-CS101-Lectures.xml</fr:route><fr:title
text="Lectures">Lectures</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>280</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0001</fr:addr><fr:route>ShanghaiTech-CS101-0001.xml</fr:route><fr:title
text="No.14 : Disjoint Set">No.14 : Disjoint Set</fr:title><fr:taxon>Lecture</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>281</fr:anchor><fr:addr
type="user">concept-0001</fr:addr><fr:route>concept-0001.xml</fr:route><fr:title
text="Equivalence Relation">Equivalence Relation</fr:title><fr:taxon>Definitions</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>An <fr:strong>equivalence relation（等价关系）</fr:strong> is a binary relation <fr:tex
display="inline"><![CDATA[\equiv ]]></fr:tex> on a set <fr:tex
display="inline"><![CDATA[S]]></fr:tex>, such that:

  <fr:ul><fr:li>reflexive: for all <fr:tex
display="inline"><![CDATA[x : S]]></fr:tex>, <fr:tex
display="inline"><![CDATA[x \equiv  x]]></fr:tex></fr:li>
    <fr:li>symmetric: for all <fr:tex
display="inline"><![CDATA[x, y : S]]></fr:tex>, if <fr:tex
display="inline"><![CDATA[x \equiv  y]]></fr:tex> then <fr:tex
display="inline"><![CDATA[y \equiv  x]]></fr:tex></fr:li>
    <fr:li>transitive: for all <fr:tex
display="inline"><![CDATA[x, y, z : S]]></fr:tex>, if <fr:tex
display="inline"><![CDATA[x \equiv  y]]></fr:tex> and <fr:tex
display="inline"><![CDATA[y \equiv  z]]></fr:tex> then <fr:tex
display="inline"><![CDATA[x \equiv  z]]></fr:tex></fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree>

  It's obvious that an equivalence relation can be used to <fr:strong>partition a set into disjoint (not overlapping) subsets</fr:strong>.

  <fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>282</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0002</fr:addr><fr:route>ShanghaiTech-CS101-0002.xml</fr:route><fr:title
text="Disjoint Set">Disjoint Set</fr:title><fr:taxon>Definitions</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>Disjoint set（并查集） is a data structure that keeps track of equivalence classes of all elements in a set.

  It supports two operations:

  <fr:ul><fr:li><fr:code>find(x)</fr:code>: return the representative of the set that element <fr:tex
display="inline"><![CDATA[x]]></fr:tex> belongs to.</fr:li>
    <fr:li><fr:code>union(x, y)</fr:code>: merge the sets that contain <fr:tex
display="inline"><![CDATA[x]]></fr:tex> and <fr:tex
display="inline"><![CDATA[y]]></fr:tex>.</fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree>

  <fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>283</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0003</fr:addr><fr:route>ShanghaiTech-CS101-0003.xml</fr:route><fr:title
text="Implementation of Disjoint Set">Implementation of Disjoint Set</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>Use an array to store the representative of each element, the structure will be an directed tree where each element points to a representative.

  <html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
    <html:img
src="ShanghaiTech-CS101/dsu.png" />
    <html:figcaption>并查集实现的直观结构：一颗内向树</html:figcaption>
  </html:figure>

  Therefore, the two operations will be:

  <fr:ul><fr:li><fr:code>find :: Eq a =&gt; DisjointSet a -&gt; a -&gt; a</fr:code> : find the representative of an element</fr:li>
    <fr:li><fr:code>union :: Eq a =&gt; DisjointSet a -&gt; a -&gt; a -&gt; DisjointSet a</fr:code> : merge two sets</fr:li></fr:ul>

  Trivially, <fr:code>find</fr:code> recursively finds the root of the tree, and <fr:code>union</fr:code> merges two trees by making one root the child of the other, the time complexity of both operations is <fr:tex
display="inline"><![CDATA[\Omicron  (n)]]></fr:tex> since the height of the tree can be as large as <fr:tex
display="inline"><![CDATA[n]]></fr:tex>.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>284</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0004</fr:addr><fr:route>ShanghaiTech-CS101-0004.xml</fr:route><fr:title
text="Merge By Rank Optimization">Merge By Rank Optimization</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>To optimize the <fr:link
type="local"
href="ShanghaiTech-CS101-0003.xml"
addr="ShanghaiTech-CS101-0003"
title="Implementation of Disjoint Set">trivial implementation</fr:link> of the union operation, we can use the <fr:strong>merge by rank</fr:strong> optimization.

  Intuitively, we want the height of the tree to be small. Therefore, we can merge the smaller tree into the larger tree to keep the height of the tree small.</fr:p><fr:p><fr:strong>Worst Case</fr:strong>:

  <html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
    <html:img
src="ShanghaiTech-CS101/dsu-worst.png" />
    <html:figcaption>仅使用按秩合并的并查集，最坏情况结构</html:figcaption>
  </html:figure>

  In the worst case, a disjoint set with height <fr:tex
display="inline"><![CDATA[h]]></fr:tex> will have 
  <fr:tex
display="block"><![CDATA[     \sum _{k = 0}^{h} h \binom {h}{k} = h \cdot  2^{h - 1}   ]]></fr:tex>
  elements, which means the depth of a tree will be logarithmic in the number of elements.</fr:p><fr:p><fr:strong>Time Complexity</fr:strong>: <fr:tex
display="inline"><![CDATA[\Omicron  (\log  n)]]></fr:tex></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>285</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0005</fr:addr><fr:route>ShanghaiTech-CS101-0005.xml</fr:route><fr:title
text="Path Compression Optimization">Path Compression Optimization</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>To optimize the <fr:link
type="local"
href="ShanghaiTech-CS101-0003.xml"
addr="ShanghaiTech-CS101-0003"
title="Implementation of Disjoint Set">trivial implementation</fr:link> of the union operation, we can use the <fr:strong>path compression optimization</fr:strong>.</fr:p><fr:p>By the definition of the <fr:link
type="local"
href="concept-0001.xml"
addr="concept-0001"
title="Equivalence Relation">equivalence relation</fr:link>, we know that the elements in the same equivalence class can <fr:strong>choose the same element as the representative</fr:strong>. Thus, we can set all the elements in the same equivalence class to point to the same, final representative when we find the representative of an element.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:p>With the two optimizations above the time complexity of both operations can be reduced to <fr:tex
display="inline"><![CDATA[\Omicron  (\alpha  (n))]]></fr:tex>, where <fr:tex
display="inline"><![CDATA[\alpha  (n)]]></fr:tex> is the <fr:link
type="external"
href="https://en.wikipedia.org/wiki/Ackermann_function">inverse Ackermann function</fr:link>, which is a very slow growing function, so the time complexity of both operations is almost <fr:tex
display="inline"><![CDATA[\Theta  (1)]]></fr:tex>.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>286</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0006</fr:addr><fr:route>ShanghaiTech-CS101-0006.xml</fr:route><fr:title
text="No.15 : Graphs">No.15 : Graphs</fr:title><fr:taxon>Lecture</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>259</fr:anchor><fr:addr
type="user">concept-0002</fr:addr><fr:route>concept-0002.xml</fr:route><fr:title
text="Graph">Graph</fr:title><fr:taxon>Definitions</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>A <fr:strong>graph</fr:strong> is a collection of vertices and edges. An edge connects two vertices. We can represent a graph as <fr:tex
display="inline"><![CDATA[G = (V, E)]]></fr:tex>, where <fr:tex
display="inline"><![CDATA[V]]></fr:tex> is the set of vertices and <fr:tex
display="inline"><![CDATA[E]]></fr:tex> is the set of edges.</fr:p><fr:p>A graph can be directed or undirected, edge <fr:tex
display="inline"><![CDATA[(u, v)]]></fr:tex> in a directed graph has a direction from <fr:tex
display="inline"><![CDATA[u]]></fr:tex> to <fr:tex
display="inline"><![CDATA[v]]></fr:tex>, while in an undirected graph, the edge has no direction (can be denoted as <fr:tex
display="inline"><![CDATA[\{u, v\}]]></fr:tex>).</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>260</fr:anchor><fr:addr
type="user">concept-0003</fr:addr><fr:route>concept-0003.xml</fr:route><fr:title
text="Degree (graph theory)">Degree (graph theory)</fr:title><fr:taxon>Definitions</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>The <fr:strong>degree</fr:strong> of a vertex in a graph is the number of edges incident to the vertex.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>261</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0007</fr:addr><fr:route>ShanghaiTech-CS101-0007.xml</fr:route><fr:title
text="Subgraph">Subgraph</fr:title><fr:taxon>Definitions</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>A <fr:strong>subgraph</fr:strong> of a graph <fr:tex
display="inline"><![CDATA[G = (V, E)]]></fr:tex> is a graph <fr:tex
display="inline"><![CDATA[G' = (V', E')]]></fr:tex> such that <fr:tex
display="inline"><![CDATA[V' \subseteq  V]]></fr:tex> and <fr:tex
display="inline"><![CDATA[E' \subseteq  E, \forall  (u, v) \in  E', u, v \in  V']]></fr:tex>.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>262</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0008</fr:addr><fr:route>ShanghaiTech-CS101-0008.xml</fr:route><fr:title
text="Vertex-induced subgraph">Vertex-induced subgraph</fr:title><fr:taxon>Definitions</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>A <fr:strong>vertex-induced subgraph</fr:strong> of a graph <fr:tex
display="inline"><![CDATA[G = (V, E)]]></fr:tex> is a graph <fr:tex
display="inline"><![CDATA[G' = (V', E')]]></fr:tex> such that <fr:tex
display="inline"><![CDATA[V' \subseteq  V]]></fr:tex> and <fr:tex
display="inline"><![CDATA[E' = \{(u, v) \in  E \mid  u, v \in  V'\}]]></fr:tex>.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>263</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0009</fr:addr><fr:route>ShanghaiTech-CS101-0009.xml</fr:route><fr:title
text="Path (graph theory)">Path (graph theory)</fr:title><fr:taxon>Definitions</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>A <fr:strong>path</fr:strong> in a graph is a sequence of vertices <fr:tex
display="inline"><![CDATA[v_1, v_2, \ldots , v_k]]></fr:tex> such that <fr:tex
display="inline"><![CDATA[(v_i, v_{i+1})]]></fr:tex> is an edge for all <fr:tex
display="inline"><![CDATA[1 \leq  i < k]]></fr:tex>. The length of a path is the number of edges in the path.</fr:p><fr:p><fr:strong>Derivations</fr:strong>:
  <fr:ul><fr:li>Simple path: A path with no repeated vertices.</fr:li>
    <fr:li>Cycle: A path with the same start and end vertices.</fr:li>
    <fr:li>Simple Cycle: A cycle with no repeated vertices except the start and end vertices.</fr:li>
    <fr:li>Path in a graph with weights: the length of a path is the sum of the weights of the edges in the path.</fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:p>Here are the methods to represent the graph:</fr:p><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>264</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-000A</fr:addr><fr:route>ShanghaiTech-CS101-000A.xml</fr:route><fr:title
text="Binary-relation list">Binary-relation list</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p><fr:strong>Binary-relation list</fr:strong> is an implementation of a graph. It stores all the edges in a list. Each edge is a pair of vertices.</fr:p><fr:ul><fr:li>Space complexity: <fr:tex
display="inline"><![CDATA[\Theta (|E|)]]></fr:tex></fr:li>
  <fr:li>Time complexity: <fr:tex
display="inline"><![CDATA[\Theta (|E|)]]></fr:tex></fr:li></fr:ul></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>265</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-000B</fr:addr><fr:route>ShanghaiTech-CS101-000B.xml</fr:route><fr:title
text="Adjacency Matrix">Adjacency Matrix</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p><fr:strong>Adjacency matrix</fr:strong> is an implementation of a graph. It uses a matrix to represent the connections between vertices. If <fr:tex
display="inline"><![CDATA[(i, j) \in  E]]></fr:tex>, then <fr:tex
display="inline"><![CDATA[A_{ij} = 1]]></fr:tex>, otherwise <fr:tex
display="inline"><![CDATA[A_{ij} = 0]]></fr:tex>.</fr:p><fr:ul><fr:li>Space complexity: <fr:tex
display="inline"><![CDATA[\Theta (|V|^2)]]></fr:tex></fr:li>
  <fr:li>Time complexity to check if two vertices are connected: <fr:tex
display="inline"><![CDATA[\Omicron (1)]]></fr:tex></fr:li>
  <fr:li>Time complexity to check all neighbors of a vertex: <fr:tex
display="inline"><![CDATA[\Theta (|V|)]]></fr:tex></fr:li></fr:ul></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>266</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-000C</fr:addr><fr:route>ShanghaiTech-CS101-000C.xml</fr:route><fr:title
text="Adjacency List">Adjacency List</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p><fr:strong>Adjacency list</fr:strong> is an implementation of a graph. Each vertex has a list of its neighbors. If <fr:tex
display="inline"><![CDATA[(i, j) \in  E]]></fr:tex>, then <fr:tex
display="inline"><![CDATA[j]]></fr:tex> is in the list of <fr:tex
display="inline"><![CDATA[i]]></fr:tex>.</fr:p><fr:ul><fr:li>Space complexity: <fr:tex
display="inline"><![CDATA[\Theta (|V| + |E|)]]></fr:tex></fr:li>
  <fr:li>Time complexity to check if two vertices are connected: <fr:tex
display="inline"><![CDATA[\Theta (|V|)]]></fr:tex></fr:li>
  <fr:li>Time complexity to check all neighbors of a vertex: <fr:tex
display="inline"><![CDATA[\Theta (\text {degree}(v))]]></fr:tex></fr:li></fr:ul></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>287</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-000D</fr:addr><fr:route>ShanghaiTech-CS101-000D.xml</fr:route><fr:title
text="No.16 : Graph Traversal">No.16 : Graph Traversal</fr:title><fr:taxon>Lecture</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>273</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-000E</fr:addr><fr:route>ShanghaiTech-CS101-000E.xml</fr:route><fr:title
text="Breadth-First Search">Breadth-First Search</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p><fr:pre><![CDATA[    function BFS(G, s)
      let Q be a queue
      set s as visited
      Q.enqueue(s)
      while Q is not empty
        v <- Q.dequeue()
        for all edges from v to w in G
          if w is not visited
            set w as visited
            Q.enqueue(w)
      end while
    end function]]></fr:pre></fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:backmatter></fr:tree>