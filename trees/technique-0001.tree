\date{2025-01-12}
\title{Memory Overcommitment}
\tag{technique}

\p{
  Virtual memory provides an illusion of \em{infinite memory}. This is commonly achieved by paging and swapping. However, consider the following scenario:
}

\p{
  You have an x86 machine with linux, 1 GB of RAM and sufficient swap space. You start a process that allocates 2 GB of memory. Since the virtual memory abstraction provides an illusion that this process can own the whole 3 GB user space, the OS must have a certain strategy to handle this situation.
}

\p{
  The following (allocated more memory than available) is called \strong{memory overcommitment}.
}

\p{
  Operating systems have different strategies to handle memory overcommitment, you can refer to [linux kernel documentation](https://docs.kernel.org/6.12/mm/overcommit-accounting.html) for the overcommitment policy in linux.

  \ul{
    \li{\strong{Mode 0}: Heuristic overcommit handling. Obvious overcommits of address space are refused. Used for a typical system.}
    \li{\strong{Mode 1}: Always overcommit. Appropriate for some scientific applications.}
    \li{\strong{Mode 2}: Don't overcommit.}
  }

  See also [this post on stackexchange](https://unix.stackexchange.com/questions/441364/what-is-the-purpose-of-memory-overcommitment-on-linux).
}