<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>560</fr:anchor><fr:addr
type="user">concept-0001</fr:addr><fr:route>concept-0001.xml</fr:route><fr:title
text="Equivalence Relation">Equivalence Relation</fr:title><fr:taxon>Definition</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>An <fr:strong>equivalence relation（等价关系）</fr:strong> is a binary relation <fr:tex
display="inline"><![CDATA[\equiv ]]></fr:tex> on a set <fr:tex
display="inline"><![CDATA[S]]></fr:tex>, such that:

  <fr:ul><fr:li>reflexive: for all <fr:tex
display="inline"><![CDATA[x : S]]></fr:tex>, <fr:tex
display="inline"><![CDATA[x \equiv  x]]></fr:tex></fr:li>
    <fr:li>symmetric: for all <fr:tex
display="inline"><![CDATA[x, y : S]]></fr:tex>, if <fr:tex
display="inline"><![CDATA[x \equiv  y]]></fr:tex> then <fr:tex
display="inline"><![CDATA[y \equiv  x]]></fr:tex></fr:li>
    <fr:li>transitive: for all <fr:tex
display="inline"><![CDATA[x, y, z : S]]></fr:tex>, if <fr:tex
display="inline"><![CDATA[x \equiv  y]]></fr:tex> and <fr:tex
display="inline"><![CDATA[y \equiv  z]]></fr:tex> then <fr:tex
display="inline"><![CDATA[x \equiv  z]]></fr:tex></fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Context">Context</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>561</fr:anchor><fr:addr
type="user">random-idea-0001</fr:addr><fr:route>random-idea-0001.xml</fr:route><fr:title
text="Essence, Reductionism and Abstraction Leak">Essence, Reductionism and Abstraction Leak</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="astinita.xml"
addr="astinita"
title="Hengyu Ai">Hengyu Ai</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Consider this question: To what extent can we say that the essence of one thing <fr:tex
display="inline"><![CDATA[x]]></fr:tex> is almost another thing <fr:tex
display="inline"><![CDATA[y]]></fr:tex>?</fr:p><fr:p>In algebra, we have:</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>473</fr:anchor><fr:addr
type="user">concept-0001</fr:addr><fr:route>concept-0001.xml</fr:route><fr:title
text="Equivalence Relation">Equivalence Relation</fr:title><fr:taxon>Definition</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>An <fr:strong>equivalence relation（等价关系）</fr:strong> is a binary relation <fr:tex
display="inline"><![CDATA[\equiv ]]></fr:tex> on a set <fr:tex
display="inline"><![CDATA[S]]></fr:tex>, such that:

  <fr:ul><fr:li>reflexive: for all <fr:tex
display="inline"><![CDATA[x : S]]></fr:tex>, <fr:tex
display="inline"><![CDATA[x \equiv  x]]></fr:tex></fr:li>
    <fr:li>symmetric: for all <fr:tex
display="inline"><![CDATA[x, y : S]]></fr:tex>, if <fr:tex
display="inline"><![CDATA[x \equiv  y]]></fr:tex> then <fr:tex
display="inline"><![CDATA[y \equiv  x]]></fr:tex></fr:li>
    <fr:li>transitive: for all <fr:tex
display="inline"><![CDATA[x, y, z : S]]></fr:tex>, if <fr:tex
display="inline"><![CDATA[x \equiv  y]]></fr:tex> and <fr:tex
display="inline"><![CDATA[y \equiv  z]]></fr:tex> then <fr:tex
display="inline"><![CDATA[x \equiv  z]]></fr:tex></fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:p>Maybe we can say that <fr:tex
display="inline"><![CDATA[x]]></fr:tex> and <fr:tex
display="inline"><![CDATA[y]]></fr:tex> share the same essence if and only if there exists an equivalence relation <fr:tex
display="inline"><![CDATA[\operatorname {R}]]></fr:tex>, such that <fr:tex
display="inline"><![CDATA[x \operatorname {R} y]]></fr:tex>.</fr:p><fr:p>Under this definition, we can find some interesting examples. For instance, Dijkstra's algorithm and Prim's algorithm both find a <fr:em>minimum</fr:em> among the un-visited stuff, and Dijkstra's algorithm is an A* graph search with heuristic function <fr:tex
display="inline"><![CDATA[h(v) = 0]]></fr:tex>.</fr:p><fr:p>However, it's not always to break concepts down to <fr:em>essence</fr:em>, especially we can't definitely say that everything has an essence.</fr:p><fr:p>From the perspective of computability, Dijkstra's algorithm is a turing machine that always halts, or some extremely complex lambda calculus terms that always reduces to a normal form. From the perspective of implementation and hardware, it's a collection of instructions that can be executed.</fr:p><fr:p>这种“回归本质”，或者说，还原主义的思维方式在理工科同学中并不少见，但是人心不足蛇吞象，尝试用本质描述一切就像是把大一统理论放在目标列表的第一项，总想着一口吃下整个思维过程。</fr:p><fr:p>It's unreasonable to conclude everything by assigning an essence to it. The context matters.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>474</fr:anchor><fr:addr
type="user">concept-0004</fr:addr><fr:route>concept-0004.xml</fr:route><fr:title
text="Abstraction Leak">Abstraction Leak</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>9</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p><fr:strong>Abstraction</fr:strong> is crucial for understanding complex systems. It is another layer above the concrete details. Ideally, we can order knowledge in a top-down approach, starting from the most abstract concepts and then diving into the details.</fr:p><fr:p>The not-so-ideal reality is that <fr:strong>asbtractions do not always have "proper generality"</fr:strong>. This means that in some cases we must deal with the details which the abstraction was supposed to hide. This is what we call an <fr:strong>abstraction leak</fr:strong>.</fr:p><fr:p>Abstraction leaks are not necessarily related to the implementation or hardware details. If an abstraction exagerates the generality of a concept, other things based on it may not work as expected.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>563</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0001</fr:addr><fr:route>ShanghaiTech-CS101-0001.xml</fr:route><fr:title
text="Courses › Algorithm &amp; DS Fall 2024 › Lectures › No.14 : Disjoint Set"><fr:link
type="local"
href="ShanghaiTech-CS101-Lectures.xml"
addr="ShanghaiTech-CS101-Lectures"
title="Courses › Algorithm &amp; DS Fall 2024 › Lectures"><fr:link
type="local"
href="ShanghaiTech-CS101-index.xml"
addr="ShanghaiTech-CS101-index"
title="Courses › Algorithm &amp; DS Fall 2024"><fr:link
type="local"
href="ShanghaiTech-Courses.xml"
addr="ShanghaiTech-Courses"
title="Courses">Courses</fr:link> › Algorithm &amp; DS Fall 2024</fr:link> › Lectures</fr:link> › No.14 : Disjoint Set</fr:title><fr:taxon>Lecture</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>544</fr:anchor><fr:addr
type="user">concept-0001</fr:addr><fr:route>concept-0001.xml</fr:route><fr:title
text="Equivalence Relation">Equivalence Relation</fr:title><fr:taxon>Definition</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>An <fr:strong>equivalence relation（等价关系）</fr:strong> is a binary relation <fr:tex
display="inline"><![CDATA[\equiv ]]></fr:tex> on a set <fr:tex
display="inline"><![CDATA[S]]></fr:tex>, such that:

  <fr:ul><fr:li>reflexive: for all <fr:tex
display="inline"><![CDATA[x : S]]></fr:tex>, <fr:tex
display="inline"><![CDATA[x \equiv  x]]></fr:tex></fr:li>
    <fr:li>symmetric: for all <fr:tex
display="inline"><![CDATA[x, y : S]]></fr:tex>, if <fr:tex
display="inline"><![CDATA[x \equiv  y]]></fr:tex> then <fr:tex
display="inline"><![CDATA[y \equiv  x]]></fr:tex></fr:li>
    <fr:li>transitive: for all <fr:tex
display="inline"><![CDATA[x, y, z : S]]></fr:tex>, if <fr:tex
display="inline"><![CDATA[x \equiv  y]]></fr:tex> and <fr:tex
display="inline"><![CDATA[y \equiv  z]]></fr:tex> then <fr:tex
display="inline"><![CDATA[x \equiv  z]]></fr:tex></fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree>

  It's obvious that an equivalence relation can be used to <fr:strong>partition a set into disjoint (not overlapping) subsets</fr:strong>.

  <fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>545</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0002</fr:addr><fr:route>ShanghaiTech-CS101-0002.xml</fr:route><fr:title
text="Disjoint Set">Disjoint Set</fr:title><fr:taxon>Definition</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>Disjoint set（并查集） is a data structure that keeps track of equivalence classes of all elements in a set.

  It supports two operations:

  <fr:ul><fr:li><fr:code>find(x)</fr:code>: return the representative of the set that element <fr:tex
display="inline"><![CDATA[x]]></fr:tex> belongs to.</fr:li>
    <fr:li><fr:code>union(x, y)</fr:code>: merge the sets that contain <fr:tex
display="inline"><![CDATA[x]]></fr:tex> and <fr:tex
display="inline"><![CDATA[y]]></fr:tex>.</fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree>

  <fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>546</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0003</fr:addr><fr:route>ShanghaiTech-CS101-0003.xml</fr:route><fr:title
text="Implementation of Disjoint Set">Implementation of Disjoint Set</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>Use an array to store the representative of each element, the structure will be an directed tree where each element points to a representative.

  <html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
    <html:img
src="ShanghaiTech-CS101/dsu.png" />
    <html:figcaption>并查集实现的直观结构：一颗内向树</html:figcaption>
  </html:figure>

  Therefore, the two operations will be:

  <fr:ul><fr:li><fr:code>find :: Eq a =&gt; DisjointSet a -&gt; a -&gt; a</fr:code> : find the representative of an element</fr:li>
    <fr:li><fr:code>union :: Eq a =&gt; DisjointSet a -&gt; a -&gt; a -&gt; DisjointSet a</fr:code> : merge two sets</fr:li></fr:ul>

  Trivially, <fr:code>find</fr:code> recursively finds the root of the tree, and <fr:code>union</fr:code> merges two trees by making one root the child of the other, the time complexity of both operations is <fr:tex
display="inline"><![CDATA[\Omicron  (n)]]></fr:tex> since the height of the tree can be as large as <fr:tex
display="inline"><![CDATA[n]]></fr:tex>.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>547</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0004</fr:addr><fr:route>ShanghaiTech-CS101-0004.xml</fr:route><fr:title
text="Merge By Rank Optimization">Merge By Rank Optimization</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>To optimize the <fr:link
type="local"
href="ShanghaiTech-CS101-0003.xml"
addr="ShanghaiTech-CS101-0003"
title="Implementation of Disjoint Set">trivial implementation</fr:link> of the union operation, we can use the <fr:strong>merge by rank</fr:strong> optimization.

  Intuitively, we want the height of the tree to be small. Therefore, we can merge the smaller tree into the larger tree to keep the height of the tree small.</fr:p><fr:p><fr:strong>Worst Case</fr:strong>:

  <html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
    <html:img
src="ShanghaiTech-CS101/dsu-worst.png" />
    <html:figcaption>仅使用按秩合并的并查集，最坏情况结构</html:figcaption>
  </html:figure>

  In the worst case, a disjoint set with height <fr:tex
display="inline"><![CDATA[h]]></fr:tex> will have 
  <fr:tex
display="block"><![CDATA[     \sum _{k = 0}^{h} h \binom {h}{k} = h \cdot  2^{h - 1}   ]]></fr:tex>
  elements, which means the depth of a tree will be logarithmic in the number of elements.</fr:p><fr:p><fr:strong>Time Complexity</fr:strong>: <fr:tex
display="inline"><![CDATA[\Omicron  (\log  n)]]></fr:tex></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>548</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0005</fr:addr><fr:route>ShanghaiTech-CS101-0005.xml</fr:route><fr:title
text="Path Compression Optimization">Path Compression Optimization</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>To optimize the <fr:link
type="local"
href="ShanghaiTech-CS101-0003.xml"
addr="ShanghaiTech-CS101-0003"
title="Implementation of Disjoint Set">trivial implementation</fr:link> of the union operation, we can use the <fr:strong>path compression optimization</fr:strong>.</fr:p><fr:p>By the definition of the <fr:link
type="local"
href="concept-0001.xml"
addr="concept-0001"
title="Equivalence Relation">equivalence relation</fr:link>, we know that the elements in the same equivalence class can <fr:strong>choose the same element as the representative</fr:strong>. Thus, we can set all the elements in the same equivalence class to point to the same, final representative when we find the representative of an element.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:p>With the two optimizations above the time complexity of both operations can be reduced to <fr:tex
display="inline"><![CDATA[\Omicron  (\alpha  (n))]]></fr:tex>, where <fr:tex
display="inline"><![CDATA[\alpha  (n)]]></fr:tex> is the <fr:link
type="external"
href="https://en.wikipedia.org/wiki/Ackermann_function">inverse Ackermann function</fr:link>, which is a very slow growing function, so the time complexity of both operations is almost <fr:tex
display="inline"><![CDATA[\Theta  (1)]]></fr:tex>.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Backlinks">Backlinks</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>564</fr:anchor><fr:addr
type="user">ShanghaiTech-CS101-0005</fr:addr><fr:route>ShanghaiTech-CS101-0005.xml</fr:route><fr:title
text="Path Compression Optimization">Path Compression Optimization</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>8</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>To optimize the <fr:link
type="local"
href="ShanghaiTech-CS101-0003.xml"
addr="ShanghaiTech-CS101-0003"
title="Implementation of Disjoint Set">trivial implementation</fr:link> of the union operation, we can use the <fr:strong>path compression optimization</fr:strong>.</fr:p><fr:p>By the definition of the <fr:link
type="local"
href="concept-0001.xml"
addr="concept-0001"
title="Equivalence Relation">equivalence relation</fr:link>, we know that the elements in the same equivalence class can <fr:strong>choose the same element as the representative</fr:strong>. Thus, we can set all the elements in the same equivalence class to point to the same, final representative when we find the representative of an element.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:backmatter></fr:tree>